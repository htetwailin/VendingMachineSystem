@model IEnumerable<VendingMachineSystem.Models.Product.Product>

@{
    ViewData["Title"] = "Create";
    Layout = "~/Views/Shared/_Layout.cshtml";
}

<div class="container mt-5">
    <h2 class="mb-4">Add Products to Cart</h2>

    <div class="row">
        @foreach (var item in Model)
        {
            <div class="col-lg-4 col-md-6 col-sm-12 mb-4">
                <div class="card h-100">
                    <div class="card-body">
                        <h5 class="card-title">@item.name</h5>
                        <div class="mb-3">
                            <label for="quantity-@item.id" class="form-label">Quantity</label>
                            <input type="number" id="quantity-@item.id" name="quantity" min="0" class="form-control" required />
                        </div>
                        <div class="mb-3">
                            <label for="price-@item.id" class="form-label">Price</label>
                            <input type="text" id="price-@item.id" name="price" class="form-control" required />
                        </div>
                        <button type="button" class="btn btn-success btn-add-to-cart"
                                data-product-id="@item.id" data-product-name="@item.name" data-product-price="@item.price">
                            Add
                        </button>
                    </div>
                </div>
            </div>
        }
    </div>

    <form id="cartForm" asp-action="CreatePurchase" method="post">
        <div class="table-responsive mt-4">
            <table class="table" id="cartTable">
                <thead>
                    <tr>
                        <th>No</th>
                        <th>Name</th>
                        <th>Quantity</th>
                        <th>Price</th>
                        <th>Total</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <!-- Cart items will be appended here -->
                </tbody>
            </table>
        </div>

        <div class="mt-3">
            <button type="submit" class="btn btn-primary">Submit Purchase</button>
        </div>
    </form>

    <div class="mt-3">
        <a asp-action="Index" class="btn btn-secondary">Back to List</a>
    </div>
</div>
@section Scripts {
    <partial name="_ValidationScriptsPartial" />

    <script>
        document.addEventListener('DOMContentLoaded', function () {
            const cartTableBody = document.querySelector('#cartTable tbody');

            document.querySelectorAll('.btn-add-to-cart').forEach(button => {
                button.addEventListener('click', function () {
                    const productId = this.getAttribute('data-product-id');
                    const productName = this.getAttribute('data-product-name');
                    const productPrice = parseFloat(this.getAttribute('data-product-price'));
                    const quantity = parseInt(document.querySelector(`#quantity-${productId}`).value);

                    if (quantity > 0) {
                        const totalPrice = quantity * productPrice;

                        let row = document.querySelector(`#cartTable tbody tr[data-product-id="${productId}"]`);
                        if (row) {
                            const currentQuantity = parseInt(row.querySelector('.quantity').textContent);
                            const currentTotalPrice = parseFloat(row.querySelector('.total').textContent);
                            row.querySelector('.quantity').textContent = currentQuantity + quantity;
                            row.querySelector('.total').textContent = (currentTotalPrice + totalPrice).toFixed(4);
                        } else {
                            const rowNumber = cartTableBody.children.length + 1;
                            row = document.createElement('tr');
                            row.setAttribute('data-product-id', productId);
                            row.innerHTML = `
                                        <td>${rowNumber}</td>
                                        <td>${productName}</td>
                                        <td class="quantity">${quantity}</td>
                                        <td class="price">${productPrice.toFixed(4)}</td>
                                        <td class="total">${totalPrice.toFixed(4)}</td>
                                        <td>
                                            <button class="btn btn-danger btn-remove" data-product-id="${productId}">Remove</button>
                                        </td>
                                    `;
                            cartTableBody.appendChild(row);
                        }

                        // Clear input field after adding to cart
                        document.querySelector(`#quantity-${productId}`).value = '';
                        document.querySelector(`#price-${productId}`).value = '';
                    } else {
                        alert('Please enter a valid quantity.');
                    }
                });
            });

            // Remove item from the cart
            cartTableBody.addEventListener('click', function (event) {
                if (event.target.classList.contains('btn-remove')) {
                    event.target.closest('tr').remove();
                    updateCartIndices();
                }
            });

            // Update cart item indices after removal
            function updateCartIndices() {
                const rows = cartTableBody.querySelectorAll('tr');
                rows.forEach((row, index) => {
                    row.querySelector('td:first-child').textContent = index + 1;
                });
            }

            // Submit form with cart items
            document.querySelector('#cartForm').addEventListener('submit', function () {
                const cartItems = [];
                document.querySelectorAll('#cartTable tbody tr').forEach(row => {
                    const productId = row.getAttribute('data-product-id');
                    const quantity = row.querySelector('.quantity').textContent;
                    const price = row.querySelector('.price').textContent;
                    const totalPrice = row.querySelector('.total').textContent;
                    
                    cartItems.push({ productId, quantity, price, totalPrice });
                });

                // Add hidden inputs for cart items
                cartItems.forEach((item, index) => {
                    this.appendChild(createHiddenInput(`cartItems[${index}].ProductId`, item.productId));
                    this.appendChild(createHiddenInput(`cartItems[${index}].Quantity`, item.quantity));
                    this.appendChild(createHiddenInput(`cartItems[${index}].Price`, item.price));
                    this.appendChild(createHiddenInput(`cartItems[${index}].TotalPrice`, item.totalPrice));
                });
            });

            // Helper function to create hidden inputs
            function createHiddenInput(name, value) {
                const input = document.createElement('input');
                input.type = 'hidden';
                input.name = name;
                input.value = value;
                return input;
            }
        });
    </script>
}
